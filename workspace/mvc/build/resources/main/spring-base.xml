<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
        <property name="config" ref="wall-config" />
    </bean>

    <bean id="wall-config" class="com.alibaba.druid.wall.WallConfig">
        <property name="multiStatementAllow" value="true" />
    </bean>

    <bean id="dataSourceBase" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="#{envFile['basedb.url']}"/>
        <property name="username" value="#{envFile['basedb.username']}"/>
        <property name="password" value="#{envFile['basedb.password']}"/>

        <property name="initialSize" value="#{envFile['basedb.initialSize']}"/>
        <property name="minIdle" value="#{envFile['basedb.minIdle']}"/>
        <property name="maxActive" value="#{envFile['basedb.maxActive']}"/>

        <property name="connectionInitSqls">
            <list>
                <value>SET NAMES utf8mb4</value>
            </list>
        </property>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="30000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
    </bean>

    <!-- PlatformTransactionManager -->
    <bean id="transactionManagerDataCenter" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceBase"/>
    </bean>
    <!-- Enable Annotation based Declarative Transaction Management -->
    <tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManagerDataCenter"/>


    <!-- mybatis -->
    <bean id="sqlSessionFactoryBase" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSourceBase"/>
        <property name="mapperLocations" value="classpath*:mapper/**/*.xml"/>
        <property name="typeAliasesPackage" value="com.desmond.model"/>
        <property name="configLocation" value="classpath:mybatis-base-config.xml"/>
    </bean>

    <bean id="sqlSessionBase" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactoryBase"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.desmond.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBase"/>
    </bean>

</beans>